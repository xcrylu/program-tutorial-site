1. 环境要求：
    Node.js（v14+，推荐 v16）
    MySQL（v5.7+ 或 v8.0）
2. 项目结构
    program-tutorial-site/
    ├── config/            # 配置文件（数据库连接）
    │   └── db.js          # MySQL 连接配置
    ├── models/            # 数据模型（数据库操作）
    │   ├── courseModel.js # 课程相关操作
    │   └── chapterModel.js# 章节相关操作
    ├── routes/            # 路由（请求处理）
    │   ├── index.js       # 首页路由
    │   ├── course.js      # 课程详情路由
    │   └── chapter.js     # 章节内容路由
    ├── public/            # 静态资源（CSS/JS/图片）
    │   ├── css/
    │   │   └── style.css  # 自定义样式
    │   └── js/
    │       └── main.js    # 前端交互（可选）
    ├── views/             # 前端模板（EJS）
    │   ├── layouts/
    │   │   └── layout.ejs # 公共模板（头部/底部）
    │   ├── index.ejs      # 首页
    │   ├── course.ejs     # 课程详情页
    │   └── chapter.ejs    # 章节内容页
    ├── .env               # 环境变量（数据库密码等敏感信息）
    ├── app.js             # 入口文件（启动服务器）
    ├── package.json       # 项目依赖
    └── tutorial.sql       # MySQL 数据库初始化脚本

3. 项目依赖
    express               # Web 框架
    ejs                   # 模板引擎
    mysql2                # MySQL 数据库连接
    dotenv                # 环境变量管理
    body-parser           # 解析请求体

    安装核心依赖：
    npm install express ejs mysql2 dotenv body-parser

4. 数据库初始化
    创建数据库并导入 tutorial.sql 脚本：
    CREATE DATABASE tutorial_db;
    USE tutorial_db;
    SOURCE path/to/tutorial.sql;





用户登录与认证模块实现：

基于现有的 Node.js + MySQL 网站，
添加完整的用户认证系统，包括注册、登录、JWT 认证和基于角色的权限管理。以下是实现方案和完整代码。
功能设计
用户注册：邮箱 / 用户名注册，密码加密存储
用户登录：账号密码验证，JWT 令牌发放
身份认证：基于 JWT 的无状态身份验证
权限管理：支持管理员 / 普通用户 / 游客三种角色
安全特性：密码加密、防 XSS、CSRF 保护、令牌过期机制

1. 安装核心依赖：
    npm install bcryptjs jsonwebtoken express-validator cookie-parser cors

    模块功能说明：
    bcryptjs：密码加密
    jsonwebtoken：生成和验证 JWT 令牌
    express-validator：表单验证
    cookie-parser：处理 HTTP cookies
    cors：跨域资源共享

2. 数据库表设计：
    users 表：存储用户信息（id, username, password, email, reated_at）
    roles 表：存储角色信息（id, role_name）
    user_roles 表：用户与角色的多对多关系（user_id, role_id）

3. 代码实现